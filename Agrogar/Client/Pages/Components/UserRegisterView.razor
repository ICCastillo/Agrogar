@inject IAuthService authService
@inject ISnackbar Snackbar
@inject IDataStorageService dataStorageService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations




<style>
	.pa-4 {
		background-color: rgba(255, 255, 255, 0.75);
		backdrop-filter: blur(20px);
	}

	.centered {
		display: flex;
		justify-content: center;
	}


</style>

<div class="centered">
	<MudPaper Class="pa-4 mb-1" Style="text-align:center; width:400px">
		<h4 class="mt-2">Registro de usuario</h4>
	</MudPaper>
</div>

<div class="centered">
	<MudPaper Class="pa-4" Style="width:400px">
		<MudForm Model="@user" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudTextField T="string" Label="Nombre" Required="true" RequiredError="El nombre es obligatorio!"
						  Validation="@(new{ErrorMessage = "El nombre es obligatorio"})" @bind-Value="@user.Name" />

			<MudTextField T="string" Label="Teléfono" Required="true" RequiredError="El Teléfono es obligatorio!"
						  Validation="@(new{ErrorMessage = "El Teléfono es obligatorio"})" @bind-Value="@user.PhoneNumber" />

			<MudTextField T="string" Label="Email" Required="true" RequiredError="El Teléfono es obligatorio!"
						  Validation="@(new EmailAddressAttribute() {ErrorMessage = "El correo no es valido"})" @bind-Value="@user.Email" />

			<MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1" InputType="InputType.Password"
						  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
						  RequiredError="Password is required!" @bind-Value="@user.Password" />

			<MudTextField T="string" Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
						  Validation="@(new Func<string, string>(PasswordMatch))"
						  RequiredError="Password is required!" @bind-Value="@user.ConfirmPassword" />
			<MudCheckBox @bind-Checked="user.LicensePP" Label="Carnet Productos Fitosanitarios" Color="Color.Success" />
			<div class="mt-2" style="text-align:center">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto"
						   OnClick="(async () => {await HandleRegistration();})">Registrarse</MudButton>
			</div>
		</MudForm>
	</MudPaper>
</div>
@code {
	UserRegisterDTO user = new UserRegisterDTO();
	bool success;
	string[] errors = { };
	string message = string.Empty;
	MudTextField<string> pwField1 = new MudTextField<string>();
	MudForm form = new MudForm();



	async Task HandleRegistration()
	{
		await form.Validate();
		if (form.IsValid)
		{
			var resultRegister = await authService.Register(user);
			message = resultRegister.Message;
			if (resultRegister.Success)
			{
				message = resultRegister.Message;
				Snackbar.Add(message, Severity.Success);
				UserLoginDTO userLoginDTO = new UserLoginDTO();
				userLoginDTO.Email = user.Email;
				userLoginDTO.Password = user.Password;
				var resultLogin = await authService.Login(userLoginDTO);
				if (resultLogin.Success)
				{

					await localStorageService.SetItemAsync("authToken", resultLogin.Data);
					await authenticationStateProvider.GetAuthenticationStateAsync();
					navigationManager.NavigateTo("/propiedades");
				}


			}
			else
			{
				message = resultRegister.Message;
				Snackbar.Add(message, Severity.Error);
			}

			StateHasChanged();
		}

	}

	private IEnumerable<string> PasswordStrength(string pw)
	{
		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "¡Se requiere una contraseña!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "La contraseña debe tener al menos 8 caracteres";
	}

	private string PasswordMatch(string arg)
	{
		if (pwField1.Value != arg)
			return "Las contraseñas no coinciden.";
		return null;
	}

}