@inject IDataStorageService dataStorageService
@inject IPropertyService propertyService

<div style="margin:10px">

    
    <MudSelect T="string" Label="Provincia" MultiSelection="true" @bind-Value="provinceValue" @bind-SelectedValues="provinceOptions">
        @foreach (var province in propertyList.Select(p => p.Province).Distinct().ToList())
        {
            <MudSelectItem T="string" Value="@province">@province</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="string" Label="Municipio" MultiSelection="true" @bind-Value="municipalityValue" @bind-SelectedValues="municipalityOptions">
        @foreach (var municipality in propertyList.Select(p => p.Municipality).Distinct().ToList())
        {
            <MudSelectItem T="string" Value="@municipality">@municipality</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="string" Label="Categoria" MultiSelection="true" @bind-Value="categoryValue" @bind-SelectedValues="categoryOptions">
        @foreach (var category in dataStorageService.Categories)
        {
            <MudSelectItem T="string" Value="@category.Name">@category.Name</MudSelectItem>
        }
    </MudSelect>

    <MudButton OnClick="ApplyFilter" Style="margin-right: 20px">Aplicar</MudButton>
    <MudButton OnClick="ResetList">Restablecer</MudButton>
</div>


@code {
    List<PropertyDTO> propertyList { get; set; } = new List<PropertyDTO>();
    bool categoryFilter { get; set; } = false;
    string categoryValue { get; set; }
    IEnumerable<string> categoryOptions { get; set; } = new HashSet<string>();
    bool provinceFilter { get; set; } = false;
    string provinceValue { get; set; }
    IEnumerable<string> provinceOptions { get; set; } = new HashSet<string>();
    bool municipalityFilter { get; set; } = false;
    string municipalityValue { get; set; }
    IEnumerable<string> municipalityOptions { get; set; } = new HashSet<string>();
    bool filtered { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var propertyListResult = await propertyService.GetProperties();
        propertyList = propertyListResult.Data;
    }


    private List<PropertyDTO> FilterProperties<T>(IEnumerable<T> filterValues, Func<PropertyDTO, T, bool> filterCondition, List<PropertyDTO> properties)
    {
        return properties.Where(property => filterValues.Any(filterValue => filterCondition(property, filterValue))).ToList();
    }


    private void ApplyFilter()
    {
        if (categoryOptions.Count() < 1 && provinceOptions.Count() < 1 && municipalityOptions.Count() < 1)
        {

        }
        else
        {
            var tempProperties = propertyList;
            

            if (categoryOptions.Count() > 0)
            {
               
                tempProperties = FilterProperties(categoryOptions, (property, category) => property.Category.Name.Equals(category), tempProperties);
            }
            if (provinceOptions.Count() > 0)
            {
               
                tempProperties = FilterProperties(provinceOptions, (property, province) => property.Province.Equals(province), tempProperties);
            }
            if (municipalityOptions.Count() > 0)
            {
               
                tempProperties = FilterProperties(municipalityOptions, (property, municipality) => property.Municipality.Equals(municipality), tempProperties);
            }
            categoryOptions = new HashSet<string>();
            provinceOptions = new HashSet<string>();
            municipalityOptions = new HashSet<string>();

            if (tempProperties.Count() != 0)
            {
                dataStorageService.SetFilteredList(tempProperties);
            }
          
        }
    }

    private void ResetList()
    {
        dataStorageService.SetFilteredList(propertyList);
        filtered = false;
    }
}
